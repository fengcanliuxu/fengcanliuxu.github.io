import{_ as l,c as a,o as e,ag as t}from"./chunks/framework.BgId8OS5.js";const h=JSON.parse('{"title":"常用 API","description":"","frontmatter":{"prev":false,"next":false},"headers":[],"relativePath":"packages/Java/API/index.md","filePath":"packages/Java/API/index.md"}'),s={name:"packages/Java/API/index.md"};function p(n,i,o,r,u,d){return e(),a("div",null,i[0]||(i[0]=[t('<h1 id="常用-api" tabindex="-1">常用 API <a class="header-anchor" href="#常用-api" aria-label="Permalink to &quot;常用 API&quot;">​</a></h1><ol><li><p>equals</p><ul><li>判断两个对象地址是否相同</li><li>可以直接用 ==</li></ul></li><li><p>toString</p><ul><li>默认获取当前对象的地址 <ul><li>用于重写展示</li></ul></li></ul></li><li><p>getClass()</p><ul><li>获取当前对象类</li></ul></li><li><p>StringBuilder</p><ul><li>拼接字符串 效率别当前 += 速度快</li><li>StringBuilder().append()</li><li>使用 toString 转换为对应的 String</li></ul></li><li><p>StringBuffer</p><ul><li>性能安全</li></ul></li><li><p>StringJoiner</p><ul><li>生民拼接间隔和首位符号</li><li>new StringJoiner( &quot;, &quot;, &quot;[&quot; , &quot;]&quot;) 间隔符号 开始符号 结束符号</li></ul></li><li><p>Math</p><ul><li>floor</li><li>ceil</li><li>max</li><li>min</li></ul></li><li><p>Runtime 运行环境(单例)</p><ul><li>System.currentTimeMillis() // 获取系统的时间毫秒值</li></ul></li><li><p>BigDecimal（string）</p><ul><li><div class="info custom-block"><p class="custom-block-title">BigDecimal.valueof()</p></div></li><li>add</li><li>substract</li><li>multiply</li><li>divide 除数 保留位数 舍入位数</li></ul></li><li><p>时间</p><ul><li>localDate <ul><li>LocalDate ld = LocalDate.now()</li><li>年月日</li></ul></li><li>localTime <ul><li>时分秒</li></ul></li><li>localDateTime <ul><li>年月日 时分秒</li></ul></li><li>ZoneId <ul><li>时区</li></ul></li><li>ZonedDateTime <ul><li>带时区时间</li></ul></li></ul></li></ol><h2 id="数组-api-arrays" tabindex="-1">数组 Api - Arrays <a class="header-anchor" href="#数组-api-arrays" aria-label="Permalink to &quot;数组 Api - Arrays&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>toString</p><p>copyOfRange start end 包前不包后</p><p>copyOf 拷贝数组到一个新数组，返回这个新数组</p><p>setAll</p><p>sort</p></div><h2 id="lambda-简化匿名内部类" tabindex="-1">Lambda 简化匿名内部类 <a class="header-anchor" href="#lambda-简化匿名内部类" aria-label="Permalink to &quot;Lambda 简化匿名内部类&quot;">​</a></h2><h3 id="可变参数" tabindex="-1">可变参数 <a class="header-anchor" href="#可变参数" aria-label="Permalink to &quot;可变参数&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...nums){}</span></span></code></pre></div>',7)]))}const m=l(s,[["render",p]]);export{h as __pageData,m as default};
