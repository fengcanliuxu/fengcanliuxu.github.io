import{_ as i,c as a,o as t,ag as p}from"./chunks/framework.BgId8OS5.js";const d=JSON.parse('{"title":"Spring Boot","description":"","frontmatter":{"next":false,"prev":false},"headers":[],"relativePath":"packages/Java/Spring/SpringBoot.md","filePath":"packages/Java/Spring/SpringBoot.md"}'),n={name:"packages/Java/Spring/SpringBoot.md"};function l(e,s,o,c,r,h){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="spring-boot" tabindex="-1">Spring Boot <a class="header-anchor" href="#spring-boot" aria-label="Permalink to &quot;Spring Boot&quot;">​</a></h1><h3 id="入口" tabindex="-1">入口 <a class="header-anchor" href="#入口" aria-label="Permalink to &quot;入口&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SpringBootApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Project.class, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>必须配置 @ComponentScan, 默认扫描当前包和对应子包下面。</p></div><p>注解</p><p><strong>@SpringBootApplication</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( 入口类.class )</span></span></code></pre></div><h3 id="controller" tabindex="-1">Controller <a class="header-anchor" href="#controller" aria-label="Permalink to &quot;Controller&quot;">​</a></h3><p><strong>@RestController</strong></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><em>当前是一个请求处理类</em></p><p>相当于是</p><p>@Controller</p><p>@ResponseBody</p></div><div class="info custom-block"><p class="custom-block-title">@PostMapping(&#39;/path&#39;)</p><p>post 请求</p></div><div class="info custom-block"><p class="custom-block-title">@GetMapping(&#39;/path&#39;)</p><p>get请求</p></div><div class="info custom-block"><p class="custom-block-title">@Component</p><p>将类直接交给 IOC 管理</p><p>声明 bean 的基础注解</p></div><div class="info custom-block"><p class="custom-block-title">@Autowired</p><p>直接注入 service, 自动寻找 bean 对象， 为变量赋值，依赖注入 DI 的实现。</p></div><div class="info custom-block"><p class="custom-block-title">@Qualifier(&quot;&quot;)</p><p>根据 bean 名字注入 和 autoWired 配合使用</p></div><div class="info custom-block"><p class="custom-block-title">@Resource(name = &quot;&quot;)</p><p>根据 bean 名字注入</p></div><p>::: @Primary</p><p>提高 bean 的权重</p><p>:::</p><h2 id="service" tabindex="-1">service <a class="header-anchor" href="#service" aria-label="Permalink to &quot;service&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">@Service(value,“当前Bean名称”)</p><p>Component 衍生注解 业务层</p></div><div class="warning custom-block"><p class="custom-block-title">@Repository</p><p>Component 衍生注解， 标注在数据方位层</p><p>用的少</p></div>`,22)]))}const g=i(n,[["render",l]]);export{d as __pageData,g as default};
