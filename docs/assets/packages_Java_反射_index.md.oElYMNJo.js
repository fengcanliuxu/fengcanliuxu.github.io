import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.BgId8OS5.js";const o=JSON.parse('{"title":"反射","description":"","frontmatter":{"prev":false,"next":false},"headers":[],"relativePath":"packages/Java/反射/index.md","filePath":"packages/Java/反射/index.md"}'),l={name:"packages/Java/反射/index.md"};function t(p,s,h,k,d,r){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h1><h4 id="反射原理" tabindex="-1">反射原理： <a class="header-anchor" href="#反射原理" aria-label="Permalink to &quot;反射原理：&quot;">​</a></h4><ol><li>获取class 对象</li></ol><ul><li>Class.class class 具体的类</li><li>Class.forName(&quot;全类名&quot;) com.wyw.</li><li>new Class.getClass()</li></ul><h4 id="获取类的构造器" tabindex="-1">获取类的构造器 <a class="header-anchor" href="#获取类的构造器" aria-label="Permalink to &quot;获取类的构造器&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclareConstructors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =  getDeclareConstructors(String.class, int.class)  return Constructor[]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = (class) cl.newInstance();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 私有构造器 会报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c1.setAccessible(true); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 禁用检查权限</span></span></code></pre></div><h4 id="获取成员变量" tabindex="-1">获取成员变量 <a class="header-anchor" href="#获取成员变量" aria-label="Permalink to &quot;获取成员变量&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = Cat.class;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Field[] fields = c.getDeclearedFidlds(&quot;key&quot; || null);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">field.getType();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">field.getName();</span></span></code></pre></div><p>获取方法对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDecleardMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method.getParam </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">etCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>创建注解</p><p>原理， 内部是一个接口，创建一个对应的匿名内部类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.TYPE) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明注解范围</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注解始终存活</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MyTest3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div>`,13)]))}const E=a(l,[["render",t]]);export{o as __pageData,E as default};
